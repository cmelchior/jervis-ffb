package com.jervisffb.ui.menu.hotseat

import cafe.adriel.voyager.core.model.ScreenModel
import com.jervisffb.engine.model.Coach
import com.jervisffb.engine.model.CoachId
import com.jervisffb.ui.game.viewmodel.MenuViewModel
import com.jervisffb.ui.menu.components.TeamInfo
import com.jervisffb.ui.menu.components.teamselector.TeamSelectorComponentModel
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.combine

enum class CoachType {
    HUMAN,
    COMPUTER
}

data class AiPlayer(
    val name: String,
)

/**
 * View model for controlling the "Select <Home/Away> Team" screen, that is the 2nd and 3rd step in the "Hotseat Game" flow.
 */
class SelectHotseatTeamScreenModel(
    private val menuViewModel: MenuViewModel,
    private val parentModel: HotseatScreenModel,
    private val onNextScreen: () -> Unit,
) : ScreenModel {

    private val autogeneratedCoachNames = listOf(
        "Brannigan",
        "Dreadscar",
        "Gorefang",
        "Gorgal",
        "Grimwald",
        "Hakkar",
        "Kragg",
        "Krunk",
        "Ludwig",
        "Morguk",
        "Mungus",
        "Riktor",
        "Rotgut",
        "Skarn",
        "Slade",
        "Snotfang",
        "Thundrik",
        "Uzgul",
        "Vorrik",
        "Zugmaw",
    )
    private val availableAiPlayers = listOf(
        AiPlayer("Random"),
    )

    val coachName = MutableStateFlow(autogeneratedCoachNames.random())
    val playerType = MutableStateFlow(CoachType.HUMAN)
    val selectedTeam = MutableStateFlow<TeamInfo?>(null)
    val selectedAiPlayer = MutableStateFlow<AiPlayer?>(availableAiPlayers.random())
    val aiPlayers = MutableStateFlow(availableAiPlayers)
    val isValidTeamSelection: Flow<Boolean> = selectedTeam.combine(coachName) { selectedTeam, coachName ->
        selectedTeam != null && coachName.isNotBlank()
    }

    val teamSelectorModel = TeamSelectorComponentModel(
        menuViewModel,
        { Coach(CoachId("1"), "Home Coach") },
        { teamSelected ->
            selectedTeam.value = teamSelected
        },
        getRules = { parentModel.rules ?: error("Rules are not set") }
    )

    fun updateCoachName(name: String) {
        coachName.value = name
    }

    fun updatePlayerType(type: CoachType) {
        playerType.value = type
    }

    fun updateSelectedAiPlayer(player: AiPlayer?) {
        selectedAiPlayer.value = player
    }

    fun teamSelectionDone() {
        onNextScreen()
    }
}
